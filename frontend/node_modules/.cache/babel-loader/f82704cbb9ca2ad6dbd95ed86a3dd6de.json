{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from 'axios'; // import router from \"@/router\";\n// import {serverIp} from \"../../public/config\";\n\nvar request = axios.create({\n  baseURL: \"/api\",\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(function (config) {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null\n  // if (user) {\n  //     config.headers['token'] = user.token;  // 设置请求头\n  // }\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(function (response) {\n  var res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } // // 当权限验证不通过的时候给出提示\n  // if (res.code === '401') {\n  //     // ElementUI.Message({\n  //     //     message: res.msg,\n  //     //     type: 'error'\n  //     // });\n  //     router.push(\"/login\")\n  // }\n\n\n  return res;\n}, function (error) {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"sources":["/Users/kk/Desktop/sework/vue/src/utils/request.js"],"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAEA,IAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AACzBC,EAAAA,OAAO,QADkB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAEvC;AACA;AACA;AACA;;AAEA,SAAOD,MAAP;AACH,CARD,EAQG,UAAAE,KAAK,EAAI;AACR,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAVD,E,CAYA;AACA;;AACAR,OAAO,CAACI,YAAR,CAAqBO,QAArB,CAA8BN,GAA9B,CACI,UAAAM,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAACL,MAAT,CAAgBQ,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOA,GAAP;AACH,CApBL,EAqBI,UAAAJ,KAAK,EAAI;AACLS,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQV,KAApB,EADK,CACsB;;AAC3B,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAxBL;AA4BA,eAAeR,OAAf","sourcesContent":["import axios from 'axios'\n// import router from \"@/router\";\n// import {serverIp} from \"../../public/config\";\n\nconst request = axios.create({\n    baseURL: `/api`,\n    timeout: 5000\n})\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n    // let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : null\n    // if (user) {\n    //     config.headers['token'] = user.token;  // 设置请求头\n    // }\n\n    return config\n}, error => {\n    return Promise.reject(error)\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // // 当权限验证不通过的时候给出提示\n        // if (res.code === '401') {\n        //     // ElementUI.Message({\n        //     //     message: res.msg,\n        //     //     type: 'error'\n        //     // });\n        //     router.push(\"/login\")\n        // }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"]},"metadata":{},"sourceType":"module"}